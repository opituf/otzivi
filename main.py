from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackQueryHandler, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from database import init_db, add_review, get_all_reviews, format_review
from config import BOT_TOKEN, ADMIN_PANEL_PASSWORD


init_db()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
FOOD, STAFF, INTERIOR, COMMENT, FINISH = range(5)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="login")],
    [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="write_review")]
])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
def rating_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(str(i), callback_data=f"rate_{i}") for i in range(1, 6)]
    ])


# –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
def finish_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="submit_review")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏", callback_data="change_ratings")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_comment")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_review")]
    ])


async def start(update, context):
    await update.message.reply_text(
        "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu
    )


async def help(update, context):
    await update.message.reply_text("–Ø –±–æ—Ç –∫–Ω–∏–≥–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤.")


async def login(update, context):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    return 1


async def check_password(update, context):
    password = update.message.text
    if password == ADMIN_PANEL_PASSWORD:
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return await see_reviews(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return 1


async def see_reviews(update, context):
    reviews = get_all_reviews()
    if not reviews:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
    else:
        for review in reviews:
            await update.message.reply_text(format_review(review))
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
    return ConversationHandler.END


async def write_review(update, context):
    query = update.callback_query
    await query.answer()
    context.user_data['review'] = {}
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã:",
        reply_markup=rating_keyboard()
    )
    return FOOD


async def rate_food(update, context):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    context.user_data['review']['food'] = rating
    await query.edit_message_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª:",
        reply_markup=rating_keyboard()
    )
    return STAFF


async def rate_staff(update, context):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    context.user_data['review']['staff'] = rating
    await query.edit_message_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä:",
        reply_markup=rating_keyboard()
    )
    return INTERIOR


async def rate_interior(update, context):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    context.user_data['review']['interior'] = rating

    review = context.user_data['review']
    text = (
        "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏:\n"
        f"üçΩ –ï–¥–∞: {review.get('food', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ')}/5\n"
        f"üë®‚Äçüç≥ –ü–µ—Ä—Å–æ–Ω–∞–ª: {review.get('staff', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ')}/5\n"
        f"üè† –ò–Ω—Ç–µ—Ä—å–µ—Ä: {rating}/5\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
    )

    await query.edit_message_text(
        text,
        reply_markup=finish_keyboard()
    )
    return FINISH


async def add_comment(update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return COMMENT


async def handle_comment(update, context):
    comment = update.message.text
    context.user_data['review']['comment'] = comment

    review = context.user_data['review']
    text = (
        "–í–∞—à –æ—Ç–∑—ã–≤:\n"
        f"üçΩ –ï–¥–∞: {review.get('food', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ')}/5\n"
        f"üë®‚Äçüç≥ –ü–µ—Ä—Å–æ–Ω–∞–ª: {review.get('staff', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ')}/5\n"
        f"üè† –ò–Ω—Ç–µ—Ä—å–µ—Ä: {review.get('interior', '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ')}/5\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    )

    await update.message.reply_text(
        text,
        reply_markup=finish_keyboard()
    )
    return FINISH


async def submit_review(update, context):
    query = update.callback_query
    await query.answer()

    review = context.user_data['review']
    add_review(
        food=review.get('food', 0),
        staff=review.get('staff', 0),
        interior=review.get('interior', 0),
        comment=review.get('comment')
    )

    await query.edit_message_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        reply_markup=main_menu
    )
    context.user_data.clear()
    return ConversationHandler.END


async def change_ratings(update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã:",
        reply_markup=rating_keyboard()
    )
    return FOOD


async def cancel_review(update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu
    )
    context.user_data.clear()
    return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


def main():
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
    admin_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(login, pattern="^login$")
        ],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_password)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    review_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(write_review, pattern="^write_review$")],
        states={
            FOOD: [CallbackQueryHandler(rate_food, pattern="^rate_[1-5]$")],
            STAFF: [CallbackQueryHandler(rate_staff, pattern="^rate_[1-5]$")],
            INTERIOR: [CallbackQueryHandler(rate_interior, pattern="^rate_[1-5]$")],
            FINISH: [
                CallbackQueryHandler(submit_review, pattern="^submit_review$"),
                CallbackQueryHandler(change_ratings, pattern="^change_ratings$"),
                CallbackQueryHandler(add_comment, pattern="^add_comment$"),
                CallbackQueryHandler(cancel_review, pattern="^cancel_review$")
            ],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(admin_conv_handler)
    application.add_handler(review_conv_handler)
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("stop", stop))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()